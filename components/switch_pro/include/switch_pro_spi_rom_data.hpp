#pragma once

#include <cstdint>

namespace sp {
// SPI Banks
//
// For more information, see
// https://github.com/dekuNukem/Nintendo_Switch_Reverse_Engineering/blob/master/spi_flash_notes.md
static constexpr uint8_t REG_BANK_SHIPMENT = 0x50;
static constexpr uint8_t REG_BANK_FACTORY_CONFIG = 0x60;
static constexpr uint8_t REG_BANK_USER_CAL = 0x80;

// Offsets within factory cal bank 0x60xx
static constexpr uint8_t REG_FACTORY_SERIAL_NUM = 0x00;  // 0x00-0x0F
static constexpr uint8_t REG_FACTORY_DEVICE_TYPE = 0x12; // single byte
static constexpr uint8_t REG_FACTORY_13 = 0x13; // single byte; unknown, seems to always be 0xA0
static constexpr uint8_t REG_FACTORY_COLOR_INFO = 0x1B; // if 0x01, then color info exists

static constexpr uint8_t REG_FACTORY_1_START = 0x20;
static constexpr uint8_t REG_FACTORY_IMU_START = 0x20; // 6-axis calibration data start
static constexpr uint8_t REG_FACTORY_IMU_END = 0x37;   // 6-axis calibration data end
static constexpr uint8_t REG_FACTORY_1_END = 0x37;

static constexpr uint8_t REG_FACTORY_2_START = 0x3D;          // 3D-55
static constexpr uint8_t REG_FACTORY_JOY_LEFT_START = 0x3D;   // 3D-45
static constexpr uint8_t REG_FACTORY_JOY_RIGHT_START = 0x46;  // 46-4E
static constexpr uint8_t REG_FACTORY_COLOR_DATA_START = 0x50; // body 50-52, buttons 53-55
static constexpr uint8_t REG_FACTORY_2_END = 0x55;

static constexpr uint8_t REG_BODY_RGB = 0x50;
static constexpr uint8_t REG_DEVICE_PARAMS_1_START = 0x80;
static constexpr uint8_t REG_DEVICE_IMU_HORIZONTAL_OFFSETS = 0x86;
static constexpr uint8_t REG_DEVICE_STICK_PARAMS1 = 0x86;
static constexpr uint8_t REG_DEVICE_PARAMS_1_END = 0x97;
static constexpr uint8_t REG_DEVICE_PARAMS_2_START = 0x98;
static constexpr uint8_t REG_DEVICE_STICK_PARAMS2 =
    0x98; // normally same as 1, even in pro controller
static constexpr uint8_t REG_DEVICE_PARAMS_2_END = 0xA9;

// Offsets within user cal bank 0x80xx
static constexpr uint8_t REG_USER_ANALOG_START = 0x10;
static constexpr uint8_t REG_USER_IMU_START = 0x26;
static constexpr uint8_t REG_USER_IMU_END = 0x3F;

// clang-format off
// factory calibration
static constexpr uint8_t spi_rom_data_60[] = {
    // address 0x00
    // serial number. If first byte is >= 0x80, then there is no serial number
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // address 0x10
    0xff, 0xff, // unknown
    0x03, // device type
    0xa0, // unknown
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // unknown
    0x02, // color info exists if 0x01
    0xff, 0xff, 0xff, 0xff,

    // address 0x20
    // IMU factory calibration
    0xf0, 0xff, 0x89, 0x00, 0xf0, 0x01, // accel_origin x, y, z
    0x00, 0x40, 0x00, 0x40, 0x00, 0x40, // accel_sens x, y, z
    0xf9, 0xff, 0x06, 0x00, 0x09, 0x00, // gyro_origin x, y, z
    0xe7, 0x3b, 0xe7, 0x3b, 0xe7, 0x3b, // gyro_sens x, y, z

    // unknown / unused bytes (0x38 - 0x3C)
    0xff, 0xff, 0xff, 0xff, 0xff,

    // factory calibration section 2 (0x3D)
    0xFF, 0xF7, 0x7F, // lx_max, ly_max
    0x00, 0x08, 0x80, // lx_center, ly_center
    0x00, 0x08, 0x80, // lx_min, ly_min

    0x00, 0x08, 0x80, // rx_max, ry_max
    0x00, 0x08, 0x80, // rx_center, ry_center
    0xFF, 0xF7, 0x7F, // rx_min, ry_min

    // unkown / unused byte (0x4F)
    0xff,
    // address 0x50
    0x82, 0x82, 0x82, // body color
    0x0f, 0x0f, 0x0f, // button color
    0xff, 0xff, 0xff, // left grip color
    0xff, 0xff, 0xff, // right grip color
    // unused
    0xff, 0xff, 0xff, 0xff,
    // address 0x60 (unused)
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // address 0x70 (unused)
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // address 0x80
    0x50, 0xfd, 0x00, 0x00, 0xc6, 0x0f, // imu horizontal offset

    // stick device parameters pt.1
    0x0F, 0x30, 0x61, // unused
    0x96, 0x30, 0xF3, // deadzone, range ratio
    0xD4, 0x14, 0x54, // unknown x,y
    0x41, 0x15, 0x54, // unknown x,y
    0xC7, 0x79, 0x9C, // unknown x,y
    0x33, 0x36, 0x63, // unknown x,y

    // stick device parameters pt.2
    0x0F, 0x30, 0x61, // unused
    0x96, 0x30, 0xF3, // deadzone, range ratio
    0xD4, 0x14, 0x54, // unknown x,y
    0x41, 0x15, 0x54, // unknown x,y
    0xC7, 0x79, 0x9C, // unknown x,y
    0x33, 0x36, 0x63, // unknown x,y

    // unused / unkown
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

// user calibration
static constexpr uint8_t spi_rom_data_80[] = {
    // unknown / unused
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

    0xB2, 0xA1,       // magic bytes for user Left Stick calibration
    0xFF, 0xF7, 0x7F, // lx_max, ly_max
    0x00, 0x08, 0x80, // lx_center, ly_center
    0x00, 0x00, 0x00, // lx_min, ly_min

    0xB2, 0xA1,       // magic bytes for user Right Stick calibration
    0xFF, 0xF7, 0x7F, // rx_max, ry_max
    0x00, 0x08, 0x80, // rx_center, ry_center
    0x00, 0x00, 0x00, // rx_min, ry_min

    // IMU calibration data
    0xB2, 0xA1, // magic bytes for user IMU calibration available
    0xbe, 0xff, 0x3e, 0x00, 0xf0, 0x01, // accel_origin x, y, z
    0x00, 0x40, 0x00, 0x40, 0x00, 0x40, // accel_sens x, y, z
    0xfe, 0xff, 0xfe, 0xff, 0x08, 0x00, // gyro_origin x, y, z
    0xe7, 0x3b, 0xe7, 0x3b, 0xe7, 0x3b, // gyro_sens x, y, z
};
// clang-format on

} // namespace sp
